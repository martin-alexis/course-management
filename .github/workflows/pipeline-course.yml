# =================================================================
# Multi-Environment CI/CD Pipeline for Render Deployment
# =================================================================

name: Multi-Environment CI CD Pipeline (Render)

on:
  push:
    branches:
      - develop    # Development environment branch
      - release    # Staging environment branch
      - main       # Production environment branch

jobs:
  # Build and test the application
  build:
    runs-on: ubuntu-latest
    name: Compile and Test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Run Clean, Compile and Test
        run: |
          cd course_management
          ./mvnw clean package # 'package' compiles and runs tests

  # Build and push Docker image to registry
  build-and-push-docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [build]
    outputs:
      image_tag: ${{ steps.vars.outputs.image_tag }}
      image_name: ${{ secrets.DOCKERHUB_USERNAME }}/course_management
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract project version
        id: extract_version
        run: |
          cd course_management
          echo "VERSION=$(./mvnw -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT

      # Security step: Validate that variables are not empty before building
      - name: Validate build variables
        run: |
          if [ -z "${{ steps.extract_version.outputs.VERSION }}" ]; then
            echo "Error: Project version could not be extracted. Aborting."
            exit 1
          fi
          if [ -z "${{ github.ref_name }}" ]; then
            echo "Error: Branch name (used for profile) is empty. Aborting."
            exit 1
          fi
          echo "Validation successful: Version=${{ steps.extract_version.outputs.VERSION }}, Profile=${{ github.ref_name }}"

      - name: Set dynamic image tag
        id: vars
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "image_tag=${{ steps.extract_version.outputs.VERSION }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref_name }}" = "release" ]; then
            echo "image_tag=${{ steps.extract_version.outputs.VERSION }}-rc" >> $GITHUB_OUTPUT
          else
            echo "image_tag=develop-$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT
          fi

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/course_management:${{ steps.vars.outputs.image_tag }}
          build-args: |
            PROFILE=${{ github.ref_name }}
            APP_VERSION=${{ steps.extract_version.outputs.VERSION }}

  # Deploy to Development environment on Render
  deploy-develop:
    name: Deploy to Development (Render)
    runs-on: ubuntu-latest
    needs: [build-and-push-docker]
    if: github.ref_name == 'develop' # Only runs for 'develop' branch
    steps:
      - name: Calling Render Dev Deploy Hook
        uses: gh-actions-workflows/deploy-docker-render@v1.1
        with:
          deploy-hook: ${{ secrets.RENDER_DEPLOY_HOOK_DEV }} # Development-specific hook
          image-url: ${{ needs.build-and-push-docker.outputs.image_name }}:${{ needs.build-and-push-docker.outputs.image_tag }}
          render-api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-deployment: true

  # Deploy to Staging environment on Render
  deploy-stage:
    name: Deploy to Staging (Render)
    runs-on: ubuntu-latest
    needs: [build-and-push-docker]
    if: github.ref_name == 'release' # Only runs for 'release' branch
    steps:
      - name: Calling Render Stage Deploy Hook
        uses: gh-actions-workflows/deploy-docker-render@v1.1
        with:
          deploy-hook: ${{ secrets.RENDER_DEPLOY_HOOK_STAGE }} # Staging-specific hook
          image-url: ${{ needs.build-and-push-docker.outputs.image_name }}:${{ needs.build-and-push-docker.outputs.image_tag }}
          render-api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-deployment: true

  # Deploy to Production environment on Render
  deploy-prod:
    name: Deploy to Production (Render)
    runs-on: ubuntu-latest
    needs: [build-and-push-docker]
    if: github.ref_name == 'main' # Only runs for 'main' branch
    steps:
      - name: Calling Render Prod Deploy Hook
        uses: gh-actions-workflows/deploy-docker-render@v1.1
        with:
          deploy-hook: ${{ secrets.RENDER_DEPLOY_HOOK_PROD }} # Production-specific hook
          image-url: ${{ needs.build-and-push-docker.outputs.image_name }}:${{ needs.build-and-push-docker.outputs.image_tag }}
          render-api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-deployment: true