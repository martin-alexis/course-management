name: Multi-Environment CI/CD Pipeline

on:
  push:
    branches: [ develop, release/*, main ]

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build and Test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Grant execute permission for mvnw
        run: chmod +x ./mvnw

      - name: Run tests
        run: ./mvnw clean package -DskipTests

  build-and-push-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [ build ]
    outputs:
      image_tag: ${{ steps.set-outputs.outputs.image_tag }}
      image_repo: ${{ steps.set-outputs.outputs.image_repo }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Grant execute permission for Maven Wrapper
        run: chmod +x ./mvnw

      - name: Extract project version
        id: extract_version
        run: |
          VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Validate build variables
        run: |
          if [ -z "${{ steps.extract_version.outputs.VERSION }}" ] || [ -z "${{ github.ref_name }}" ] || [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
            echo "Error: Required variables are missing. Aborting."
            exit 1
          fi

      - name: Set Profile and Image Tag based on branch
        id: vars
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          VERSION="${{ steps.extract_version.outputs.VERSION }}"
          SHA_SHORT=$(echo ${{ github.sha }} | cut -c1-7)
          
          if [[ "$BRANCH_NAME" == "main" ]]; then
          PROFILE="prod"
          IMAGE_TAG="$VERSION"
          elif [[ "$BRANCH_NAME" == release* ]]; then
          PROFILE="stg"
          IMAGE_TAG="release-$VERSION-rc"
          else 
          PROFILE="dev"
          IMAGE_TAG="develop-$SHA_SHORT"
          fi
          
          echo "PROFILE=$PROFILE" >> $GITHUB_OUTPUT
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Set job outputs
        id: set-outputs
        run: |
          echo "image_repo=course_management" >> $GITHUB_OUTPUT
          echo "image_tag=${{ steps.vars.outputs.image_tag }}" >> $GITHUB_OUTPUT


      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.set-outputs.outputs.image_repo }}:${{ steps.set-outputs.outputs.image_tag }}
          build-args: |
            PROFILE=${{ steps.vars.outputs.PROFILE }}
            APP_VERSION=${{ steps.extract_version.outputs.VERSION }}
  deploy-develop:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [ build-and-push-docker ]
    if: github.ref_name == 'develop'
    steps:
      - name: Deploy to Render
        uses: gh-actions-workflows/deploy-docker-render@v1.1
        with:
          deploy-hook: ${{ secrets.RENDER_DEPLOY_HOOK_DEV }}
          image-url: ${{ secrets.DOCKERHUB_USERNAME }}/${{ needs.build-and-push-docker.outputs.image_repo }}:${{ needs.build-and-push-docker.outputs.image_tag }}
          render-api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-deployment: true

  deploy-stage:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [ build-and-push-docker ]
    if: startsWith(github.ref_name, 'release/')
    steps:
      - name: Deploy to Render
        uses: gh-actions-workflows/deploy-docker-render@v1.1
        with:
          deploy-hook: ${{ secrets.RENDER_DEPLOY_HOOK_STG }}
          image-url: ${{ secrets.DOCKERHUB_USERNAME }}/${{ needs.build-and-push-docker.outputs.image_repo }}:${{ needs.build-and-push-docker.outputs.image_tag }}
          render-api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-deployment: true

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [ build-and-push-docker ]
    if: github.ref_name == 'main'
    steps:
      - name: Deploy to Render
        uses: gh-actions-workflows/deploy-docker-render@v1.1
        with:
          deploy-hook: ${{ secrets.RENDER_DEPLOY_HOOK_PROD }}
          image-url: ${{ secrets.DOCKERHUB_USERNAME }}/${{ needs.build-and-push-docker.outputs.image_repo }}:${{ needs.build-and-push-docker.outputs.image_tag }}
          render-api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-deployment: true